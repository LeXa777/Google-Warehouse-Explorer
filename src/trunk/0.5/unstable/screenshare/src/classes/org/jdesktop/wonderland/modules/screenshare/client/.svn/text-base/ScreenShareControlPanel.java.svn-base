/**
 * Open Wonderland
 *
 * Copyright (c) 2010, Open Wonderland Foundation, All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * The Open Wonderland Foundation designates this particular file as
 * subject to the "Classpath" exception as provided by the Open Wonderland
 * Foundation in the License file that accompanied this code.
 */
package org.jdesktop.wonderland.modules.screenshare.client;

import java.util.Iterator;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JPanel;
import org.jdesktop.wonderland.modules.webcamviewer.client.WebcamViewerControls;
import org.jdesktop.wonderland.modules.webcamviewer.client.WebcamViewerToolListener;
import org.jdesktop.wonderland.modules.webcamviewer.common.WebcamViewerState;

/**
 * Screen sharer control panel.
 * @author Jonathan Kaplan <jonathankap@gmail.com>
 */
public class ScreenShareControlPanel extends JPanel implements WebcamViewerControls {

    private static final Logger LOGGER =
            Logger.getLogger(ScreenShareControlPanel.class.getName());

    private static final String RESOURCE_BASE =
            "/org/jdesktop/wonderland/modules/webcamviewer/client/resources/";

    private final List<WebcamViewerToolListener> listeners;
    private final ScreenShareCell cell;

    public ScreenShareControlPanel(ScreenShareCell cell) {
        this.cell = cell;
        
        initComponents();

        listeners = new CopyOnWriteArrayList<WebcamViewerToolListener>();
    }

    public JComponent getComponent() {
        return this;
    }

    public void addCellMenuListener(WebcamViewerToolListener wl) {
        listeners.add(wl);
    }

    public void removeCellMenuListener(WebcamViewerToolListener wl) {
        listeners.remove(wl);
    }

    public void setMode(WebcamViewerState wvs) {
        // ignore
    }

    public void setOnHUD(boolean onHUD) {
        if (onHUD) {
            toggleHUDButton.setIcon(new ImageIcon(getClass().getResource(RESOURCE_BASE + "WebCamDock32x32.png")));
        } else {
            toggleHUDButton.setIcon(new ImageIcon(getClass().getResource(RESOURCE_BASE + "WebCamUndock32x32.png")));
        }
    }

    public void setSynced(boolean synced) {
        // ignore
    }

    public void setSharing(boolean sharing) {
        if (sharing) {
            startStopHUDButton.setIcon(new ImageIcon(getClass().getResource(RESOURCE_BASE + "WebCamStop32x32.png")));
        } else {
            startStopHUDButton.setIcon(new ImageIcon(getClass().getResource(RESOURCE_BASE + "WebCamPlay32x32.png")));
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toggleHUDButton = new javax.swing.JButton();
        startStopHUDButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(231, 230, 230));

        toggleHUDButton.setBackground(new java.awt.Color(231, 230, 230));
        toggleHUDButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/webcamviewer/client/resources/WebCamDock32x32.png"))); // NOI18N
        toggleHUDButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        toggleHUDButton.setBorderPainted(false);
        toggleHUDButton.setMargin(new java.awt.Insets(0, -4, 0, -4));
        toggleHUDButton.setOpaque(true);
        toggleHUDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleHUDButtonActionPerformed(evt);
            }
        });

        startStopHUDButton.setBackground(new java.awt.Color(231, 230, 230));
        startStopHUDButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/webcamviewer/client/resources/WebCamStop32x32.png"))); // NOI18N
        startStopHUDButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        startStopHUDButton.setBorderPainted(false);
        startStopHUDButton.setMargin(new java.awt.Insets(0, -4, 0, -4));
        startStopHUDButton.setOpaque(true);
        startStopHUDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStopHUDButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(toggleHUDButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(startStopHUDButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(toggleHUDButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(startStopHUDButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void toggleHUDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleHUDButtonActionPerformed
        Iterator<WebcamViewerToolListener> iter = listeners.iterator();
        while (iter.hasNext()) {
            WebcamViewerToolListener listener = iter.next();
            listener.toggleHUD();
        }
}//GEN-LAST:event_toggleHUDButtonActionPerformed

    private void startStopHUDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStopHUDButtonActionPerformed
        cell.toggleSharing();
    }//GEN-LAST:event_startStopHUDButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton startStopHUDButton;
    private javax.swing.JButton toggleHUDButton;
    // End of variables declaration//GEN-END:variables


}
