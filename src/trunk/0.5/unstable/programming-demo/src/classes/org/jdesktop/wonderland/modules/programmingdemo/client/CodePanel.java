/**
 * Open Wonderland
 *
 * Copyright (c) 2010, Open Wonderland Foundation, All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * The Open Wonderland Foundation designates this particular file as
 * subject to the "Classpath" exception as provided by the Open Wonderland
 * Foundation in the License file that accompanied this code.
 */
package org.jdesktop.wonderland.modules.programmingdemo.client;

import javax.swing.border.TitledBorder;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Document;

/**
 *
 * @author Jonathan Kaplan <jonathankap@gmail.com>
 */
public class CodePanel extends javax.swing.JPanel {
    private CodeWindow window;

    /** Creates new form CodePanel */
    public CodePanel(CodeWindow window) {
        this.window = window;

        initComponents();
        codePane.setContentType("text/java");
    }

    public Document getDocument() {
        return codePane.getDocument();
    }

    public void highlightLine(int lineNumber) {
        String text = codePane.getText();
        codePane.getHighlighter().removeAllHighlights();

        int startIdx = 0;
        for (int i = 0; i < lineNumber; i++) {
            startIdx = text.indexOf('\n', startIdx + 1);
        }

        int endIdx = text.indexOf('\n', startIdx + 1);

        try {
            if (text.charAt(startIdx) == '\n') {
                startIdx += 1;
            }

            codePane.getHighlighter().addHighlight(startIdx, endIdx,
                                                    DefaultHighlighter.DefaultPainter);

            // scroll the window to the current position
            codePane.setCaretPosition(startIdx);
        } catch (BadLocationException ble) {
            ble.printStackTrace();
        }
    }

    public void clearHighlight() {
        codePane.getHighlighter().removeAllHighlights();
    }

    public void setOperationCount(int gets, int swaps) {
        opsLabel.setText("Gets: " + gets + "    Swaps: " + swaps +
                         "    Total: " + (gets + swaps));
    }

    public void setHighlightedVals(String highlightedVals) {
        highlightLabel.setText(highlightedVals);
    }

    public void setRunning(boolean running) {
        String text = (running?"running":"stopped");

        ((TitledBorder) opsLabel.getBorder()).setTitle("Operations (" +
                                                       text + "):");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        opsLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        highlightLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        codePane = new javax.swing.JEditorPane();

        jLabel4.setText("}");

        opsLabel.setText("Gets: 0    Swaps: 0    Total: 0   ");
        opsLabel.setBorder(javax.swing.BorderFactory.createTitledBorder("Operations:"));

        jLabel3.setText("    }");

        jLabel1.setText("public class MyClass implements Sorter {");

        jLabel2.setText("    public void sort(Sortable s, int min, int max) {");

        highlightLabel.setText("(1:25)");
        highlightLabel.setBorder(javax.swing.BorderFactory.createTitledBorder("Highlighted Items (index)->value"));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 35, 0, 0));

        codePane.setBackground(new java.awt.Color(254, 254, 254));
        jScrollPane1.setViewportView(codePane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(opsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(highlightLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(60, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(highlightLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(opsLabel))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel2)
                    .addContainerGap(396, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane codePane;
    private javax.swing.JLabel highlightLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel opsLabel;
    // End of variables declaration//GEN-END:variables

}
