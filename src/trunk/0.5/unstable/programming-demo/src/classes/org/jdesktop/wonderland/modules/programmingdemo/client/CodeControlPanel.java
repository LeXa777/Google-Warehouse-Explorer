/**
 * Open Wonderland
 *
 * Copyright (c) 2010, Open Wonderland Foundation, All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * The Open Wonderland Foundation designates this particular file as
 * subject to the "Classpath" exception as provided by the Open Wonderland
 * Foundation in the License file that accompanied this code.
 */
package org.jdesktop.wonderland.modules.programmingdemo.client;

import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.SwingUtilities;
import org.jdesktop.wonderland.client.hud.HUDObject.DisplayMode;

/**
 * HUD control panel for programming demo
 * @author Jonathan Kaplan <jonathankap@gmail.com>
 */
public class CodeControlPanel extends javax.swing.JPanel {

    private static final Logger logger = Logger.getLogger(CodeControlPanel.class.getName());

    private CodeCell cell;
    private CodeWindow window;

    private ImageIcon dockedIcon;
    private ImageIcon undockedIcon;

    private boolean runEnabled;

    public CodeControlPanel(CodeCell cell, CodeWindow window) {
        this.cell = cell;
        this.window = window;

        initComponents();
        initIcons();
    }

    private void initIcons() {
        dockedIcon = new ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/programmingdemo/client/resources/WebCamDock32x32.png"));
        undockedIcon = new ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/programmingdemo/client/resources/WebCamUndock32x32.png"));
    }

    public void setOnHUD(final boolean onHUD) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                if (onHUD) {
                    toggleHUDButton.setIcon(dockedIcon);
                } else {
                    toggleHUDButton.setIcon(undockedIcon);
                }
            }
        });
    }

    /**
     * Gets whether a button is depressed
     * @param button the button to check
     * @return true if the button is depressed, false otherwise
     */
    public boolean isButtonDepressed(JButton button) {
        return button.isBorderPainted();
    }

    /**
     * Depress/undepress a button
     * @param button the button to depress
     * @param depress true to depress a button, false to undepress
     */
    public void depressButton(JButton button, boolean depress) {
        button.setBorderPainted(depress);
    }

    /**
     * Set whether this user can enable or disable the simulation
     * @param enabled true if this user has permission, or false if not
     */
    public void setRunEnabled(boolean enabled) {
        this.runEnabled = enabled;

        goButton.setEnabled(enabled);
        pauseButton.setEnabled(enabled);
        resetButton.setEnabled(enabled);
        stepButton.setEnabled(enabled);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toggleHUDButton = new javax.swing.JButton();
        goButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        stepButton = new javax.swing.JButton();
        settingsButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(231, 230, 230));

        toggleHUDButton.setBackground(new java.awt.Color(231, 230, 230));
        toggleHUDButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/programmingdemo/client/resources/WebCamDock32x32.png"))); // NOI18N
        toggleHUDButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        toggleHUDButton.setBorderPainted(false);
        toggleHUDButton.setMargin(new java.awt.Insets(0, -4, 0, -4));
        toggleHUDButton.setOpaque(true);
        toggleHUDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleHUDButtonActionPerformed(evt);
            }
        });

        goButton.setBackground(new java.awt.Color(231, 230, 230));
        goButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/programmingdemo/client/resources/WebCamPlay32x32.png"))); // NOI18N
        goButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        goButton.setBorderPainted(false);
        goButton.setOpaque(true);
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        stopButton.setBackground(new java.awt.Color(231, 230, 230));
        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/programmingdemo/client/resources/WebCamStop32x32.png"))); // NOI18N
        stopButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        stopButton.setBorderPainted(false);
        stopButton.setMargin(new java.awt.Insets(0, -4, 0, -4));
        stopButton.setOpaque(true);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        resetButton.setBackground(new java.awt.Color(231, 230, 230));
        resetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/programmingdemo/client/resources/WebCamRescan32x32.png"))); // NOI18N
        resetButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        resetButton.setBorderPainted(false);
        resetButton.setMargin(new java.awt.Insets(0, -4, 0, -4));
        resetButton.setOpaque(true);
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        pauseButton.setBackground(new java.awt.Color(231, 230, 230));
        pauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/programmingdemo/client/resources/WebCamPause32x32.png"))); // NOI18N
        pauseButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        pauseButton.setBorderPainted(false);
        pauseButton.setMargin(new java.awt.Insets(0, -4, 0, -4));
        pauseButton.setOpaque(true);
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        stepButton.setBackground(new java.awt.Color(231, 230, 230));
        stepButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/programmingdemo/client/resources/WebCamRight32x32.png"))); // NOI18N
        stepButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        stepButton.setBorderPainted(false);
        stepButton.setMargin(new java.awt.Insets(0, -4, 0, -4));
        stepButton.setOpaque(true);
        stepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepButtonActionPerformed(evt);
            }
        });

        settingsButton.setBackground(new java.awt.Color(231, 230, 230));
        settingsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/programmingdemo/client/resources/WebCamSyncedYes32x32.png"))); // NOI18N
        settingsButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        settingsButton.setBorderPainted(false);
        settingsButton.setMargin(new java.awt.Insets(0, -4, 0, -4));
        settingsButton.setOpaque(true);
        settingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(toggleHUDButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(goButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(stopButton)
                .add(16, 16, 16)
                .add(pauseButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(stepButton)
                .add(18, 18, 18)
                .add(resetButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(settingsButton)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(toggleHUDButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(goButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(stopButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(pauseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(stepButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(resetButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(settingsButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void toggleHUDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleHUDButtonActionPerformed
        if (window.getDisplayMode().equals(DisplayMode.HUD)) {
            window.setDisplayMode(DisplayMode.WORLD);
        } else {
            window.setDisplayMode(DisplayMode.HUD);
        }
        window.showControls(true);
}//GEN-LAST:event_toggleHUDButtonActionPerformed

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        cell.getScriptManager().start();
    }//GEN-LAST:event_goButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        if (runEnabled) {
            cell.getScriptManager().stop();
        } else {
            cell.requestStop();
        }
    }//GEN-LAST:event_stopButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        cell.getScriptManager().stop();
        cell.getSortable().reset();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        cell.getScriptManager().pause();
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void stepButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepButtonActionPerformed
        cell.getScriptManager().step();
    }//GEN-LAST:event_stepButtonActionPerformed

    private void settingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsButtonActionPerformed
        ((SortCell) cell.getParent()).showSettingsHUD();
    }//GEN-LAST:event_settingsButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton goButton;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton settingsButton;
    private javax.swing.JButton stepButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JButton toggleHUDButton;
    // End of variables declaration//GEN-END:variables
}
