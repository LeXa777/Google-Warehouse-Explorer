/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2010, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */
package org.jdesktop.wonderland.modules.pdfpresentation.client;

import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.util.List;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;

/**
 * A HUD panel to display the slides and allow the presenter to navigate through
 * them.
 *
 * @author Jordan Slott <jslott@dev.java.net>
 */
public class PDFPresenterHUDPanel extends javax.swing.JPanel {

    // The list model to hold each slide image.
    private DefaultListModel model;

    // The size of the image
    private static final int SIZE = 48;

    // The cell this panel is attached to.
    private PresentationCell cell;

    /**
     * Constructor, takes an ordered list of slides to display
     *
     * @param imageList An ordered list of images to display
     */
    public PDFPresenterHUDPanel(List<BufferedImage> imageList, PresentationCell cell) {
        initComponents();

        this.cell = cell;

        // Put the list of images in a default list model, in order
        model = new DefaultListModel();
        for (BufferedImage image : imageList) {
            Image scaledImage = createScaledImage(image, SIZE);
            model.addElement(scaledImage);
        }
        slideList.setModel(model);
        slideList.setCellRenderer(new ListImageRenderer());

        this.setButtonsEnabled(cell.isPlatformShown());
    }

    /**
     * Renderer for JList that displays the items as an image.
     */
    public class ListImageRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object value,
                int index, boolean isSelected, boolean hasFocus) {

            JLabel label = (JLabel) super.getListCellRendererComponent(list,
                    value, index, isSelected, hasFocus);
            label.setIcon(new ImageIcon((Image) value));
            label.setText("");

            return (label);
        }
    }

    /**
     * Sets whether or not the next/prev buttons are enabled or not.
     * 
     * Triggered by whether or not a platform is present.
     * 
     * @param enabled
     */
    public void setButtonsEnabled(boolean enabled) {
        this.nextButton.setEnabled(enabled);
        this.prevButton.setEnabled(enabled);
    }

    /**
     * Creates a new label given the Image, the cell name, and the size to make
     * it.
     */
    private Image createScaledImage(Image image, int size) {
        
        ImageIcon srcImage = new ImageIcon(image);

        // Resize the image. We use a trick to fetch the BufferedImage
        // from the given Image, by creating the ImageIcon and calling the
        // getImage() method. Then resize into a Buffered Image.
        BufferedImage resizedImage = new BufferedImage(size, size,
                BufferedImage.TYPE_INT_RGB);
        Graphics2D g2 = resizedImage.createGraphics();
        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
                RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2.drawImage(srcImage.getImage(), 0, 0, size, size, null);
        g2.dispose();

        return resizedImage;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        prevButton = new javax.swing.JButton();
        slideScrollPane = new javax.swing.JScrollPane();
        slideList = new javax.swing.JList();
        nextButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(530, 75));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        prevButton.setText("Prev");
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });
        add(prevButton);

        slideScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        slideList.setBackground(new java.awt.Color(0, 0, 0));
        slideList.setDragEnabled(true);
        slideList.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        slideList.setVisibleRowCount(1);
        slideScrollPane.setViewportView(slideList);

        add(slideScrollPane);

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });
        add(nextButton);
    }// </editor-fold>//GEN-END:initComponents

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        cell.incrementCurCell(-1);
    }//GEN-LAST:event_prevButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        cell.incrementCurCell(1);
    }//GEN-LAST:event_nextButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton nextButton;
    private javax.swing.JButton prevButton;
    private javax.swing.JList slideList;
    private javax.swing.JScrollPane slideScrollPane;
    // End of variables declaration//GEN-END:variables
}
