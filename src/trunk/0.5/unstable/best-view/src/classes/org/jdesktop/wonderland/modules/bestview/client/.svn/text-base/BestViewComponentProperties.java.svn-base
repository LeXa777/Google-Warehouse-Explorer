/**
 * Open Wonderland
 *
 * Copyright (c) 2010 - 2011, Open Wonderland Foundation, All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * The Open Wonderland Foundation designates this particular file as
 * subject to the "Classpath" exception as provided by the Open Wonderland
 * Foundation in the License file that accompanied this code.
 */
package org.jdesktop.wonderland.modules.bestview.client;

import java.util.ResourceBundle;
import javax.swing.JPanel;
import org.jdesktop.wonderland.client.cell.properties.CellPropertiesEditor;
import org.jdesktop.wonderland.client.cell.properties.annotation.PropertiesFactory;
import org.jdesktop.wonderland.client.cell.properties.spi.PropertiesFactorySPI;
import org.jdesktop.wonderland.modules.bestview.common.BestViewServerState;

/**
 * Component properties for best view component
 */
@PropertiesFactory(BestViewServerState.class)
public class BestViewComponentProperties extends javax.swing.JPanel
    implements PropertiesFactorySPI
{
    private static final ResourceBundle BUNDLE = ResourceBundle.getBundle(
            "org.jdesktop.wonderland.modules.bestview.client.Bundle");

    /** the properties editor */
    private CellPropertiesEditor editor;

    /** Creates new form BestViewComponentProperties */
    public BestViewComponentProperties() {
        initComponents();
    }

    /**
     * Get the display name of this editor
     */
    public String getDisplayName() {
        return BUNDLE.getString("Best_View");
    }

    /**
     * Notification from the framework of our editor object. Called before
     * the panel is displayed.
     */
    public void setCellPropertiesEditor(CellPropertiesEditor editor) {
        // save the editor
        this.editor = editor;
    }

    /**
     * Get the panel to display
     */
    public JPanel getPropertiesJPanel() {
        return this;
    }

    /**
     * Called when the view is first opened.
     */
    public void open() {
        // read data from the editor to show the current state
    }

    /**
     * Called when the view is closed.
     */
    public void close() {
        // clean up
    }

    /**
     * Called to request this form restore the default values
     */
    public void restore() {
        // restore default values from the editor
    }

    /**
     * Called to make the changes permanent
     */
    public void apply() {
        // update the ComponentServerState object in the editor
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
