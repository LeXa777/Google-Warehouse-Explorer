/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath" 
 * exception as provided by Sun in the License file that accompanied 
 * this code.
 */
package org.jdesktop.wonderland.modules.scenegraphviewer.client.jme;

import com.jme.scene.Node;
import com.jme.scene.state.TextureState;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import org.jdesktop.mtgame.Entity;
import org.jdesktop.mtgame.RenderComponent;


/**
 *
 * @author  paulby
 */
public class SceneGraphViewFrame extends javax.swing.JFrame {

    private DefaultMutableTreeNode rootNode;
    
    /** Creates new form SceneGraphViewFrame */
    public SceneGraphViewFrame() {
        initComponents();
        jTree1.setCellRenderer(new JmeTreeCellRenderer());
        jTree1.addTreeSelectionListener(new TreeSelectionListener() {

            public void valueChanged(TreeSelectionEvent e) {
                Object selectedNode = jTree1.getLastSelectedPathComponent();
                System.out.println("Selected "+selectedNode);
                
                if (selectedNode instanceof Node) {
                    Node node = (Node)selectedNode;
                    TextureState textureState = (TextureState) node.getRenderState(TextureState.RS_TEXTURE);
                    if (textureState!=null) {
                        System.out.println(textureState+"  "+textureState.getTexture().getImageLocation());
                    }
                }
            }
            
        });
    }
    
    public void addEntity(Entity entity) {
        Node sceneRoot = ((RenderComponent)entity.getComponent(RenderComponent.class)).getSceneRoot();
        
        jTree1.setModel(new JmeTreeModel(sceneRoot));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanel2 = new javax.swing.JPanel();

        jPanel1.setLayout(new java.awt.BorderLayout());

        jTree1.setModel(null);
        jScrollPane1.setViewportView(jTree1);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.setMinimumSize(new java.awt.Dimension(100, 10));
        jPanel2.setPreferredSize(new java.awt.Dimension(100, 10));
        jPanel2.setRequestFocusEnabled(false);
        jPanel1.add(jPanel2, java.awt.BorderLayout.LINE_END);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables

}
