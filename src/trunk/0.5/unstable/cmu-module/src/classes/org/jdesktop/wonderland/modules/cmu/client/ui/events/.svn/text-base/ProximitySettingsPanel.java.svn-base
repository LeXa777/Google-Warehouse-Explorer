/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2010, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */

/*
 * ProximitySettingsPanel.java
 *
 * Created on Jan 11, 2010, 1:13:56 PM
 */

package org.jdesktop.wonderland.modules.cmu.client.ui.events;

import org.jdesktop.wonderland.modules.cmu.common.events.ProximityEvent;
import org.jdesktop.wonderland.modules.cmu.common.events.responses.CMUResponseFunction;
import org.jdesktop.wonderland.modules.cmu.common.events.responses.NoArgumentFunction;

/**
 * Settings panel for proximity events
 * @author kevin
 */
public class ProximitySettingsPanel extends EventSettingsPanel<ProximityEvent> {

    private static final int EVENT_ON_ENTER_INDEX = 0;
    private static final int EVENT_ON_EXIT_INDEX = 1;

    /** Creates new form ProximitySettingsPanel */
    public ProximitySettingsPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        eventOnEnterBox = new javax.swing.JComboBox();
        distanceSpinner = new javax.swing.JSpinner();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();

        jLabel1.setText("When avatar");

        eventOnEnterBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "enters", "leaves" }));

        distanceSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                distanceChanged(evt);
            }
        });

        jLabel2.setText("meters of scene,");

        jLabel3.setText("within");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventOnEnterBox, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(distanceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1)
                .addComponent(eventOnEnterBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel3)
                .addComponent(distanceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel2))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void distanceChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_distanceChanged
        if (((Integer)this.distanceSpinner.getValue()).intValue() < 0) {
            this.distanceSpinner.setValue(new Integer(0));
        }
    }//GEN-LAST:event_distanceChanged

    @Override
    public ProximityEvent getEvent() {
        boolean eventOnEnter = (this.eventOnEnterBox.getSelectedIndex() == EVENT_ON_ENTER_INDEX);
        return new ProximityEvent(((Integer)this.distanceSpinner.getValue()).intValue(), eventOnEnter);
    }

    @Override
    public void setEvent(ProximityEvent event) {
        this.distanceSpinner.setValue(new Integer((int)event.getDistance()));
        if (event.isEventOnEnter()) {
            this.eventOnEnterBox.setSelectedIndex(EVENT_ON_ENTER_INDEX);
        } else {
            this.eventOnEnterBox.setSelectedIndex(EVENT_ON_EXIT_INDEX);
        }
    }

    @Override
    public Class getEventClass() {
        return ProximityEvent.class;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner distanceSpinner;
    private javax.swing.JComboBox eventOnEnterBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean allowsResponse(CMUResponseFunction response) {
        return response instanceof NoArgumentFunction;
    }

}
