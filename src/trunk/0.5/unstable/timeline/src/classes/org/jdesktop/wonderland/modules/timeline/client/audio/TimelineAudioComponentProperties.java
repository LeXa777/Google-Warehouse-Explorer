/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TimelineAudioComponentProperties.java
 *
 * Created on Aug 12, 2009, 10:18:21 AM
 */

package org.jdesktop.wonderland.modules.timeline.client.audio;

import javax.swing.JPanel;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.jdesktop.wonderland.client.cell.properties.CellPropertiesEditor;
import org.jdesktop.wonderland.client.cell.properties.annotation.PropertiesFactory;
import org.jdesktop.wonderland.client.cell.properties.spi.PropertiesFactorySPI;

import org.jdesktop.wonderland.common.cell.state.CellServerState;
import org.jdesktop.wonderland.modules.timeline.common.audio.TimelineAudioComponentServerState;

/**
 *
 * @author jp
 */
@PropertiesFactory(TimelineAudioComponentServerState.class)
public class TimelineAudioComponentProperties extends javax.swing.JPanel 
	implements PropertiesFactorySPI {

    private CellPropertiesEditor editor = null;

    /** Creates new form TimelineAudioComponentProperties */
    public TimelineAudioComponentProperties() {
        initComponents();
    }

   /**
     * @{inheritDoc}
     */
    public String getDisplayName() {
        return "Timeline Audio";
    }

    /**
     * @{inheritDoc}
     */
    public JPanel getPropertiesJPanel() {
        return this;
    }

    /**
     * @{inheritDoc}
     */
    public void setCellPropertiesEditor(CellPropertiesEditor editor) {
        this.editor = editor;
    }

    /**
     * @{inheritDoc}
     */
    public void open() {
        CellServerState cellServerState = editor.getCellServerState();
        TimelineAudioComponentServerState state =
                (TimelineAudioComponentServerState)cellServerState.getComponentServerState(TimelineAudioComponentServerState.class);

        if (state == null) {
            return;
        }
    }

    /**
     * @{inheritDoc}
     */
    public void close() {
        // Do nothing
    }

    /**
     * @{inheritDoc}
     */
    public void apply() {
        // Figure out whether there already exists a server state for the
        // component. If it does not exist, then return, but we could always
        // create a new one really.
        CellServerState cellServerState = editor.getCellServerState();
        TimelineAudioComponentServerState state =
                (TimelineAudioComponentServerState)cellServerState.getComponentServerState(TimelineAudioComponentServerState.class);
        if (state == null) {
            return;
        }

        editor.addToUpdateList(state);
    }

    /**
     * @{inheritDoc}
     */
    public void restore() {
        // Reset the original values to the GUI
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
