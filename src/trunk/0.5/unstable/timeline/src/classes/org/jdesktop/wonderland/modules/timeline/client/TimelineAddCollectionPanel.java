/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */
package org.jdesktop.wonderland.modules.timeline.client;

import java.awt.Dimension;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.wonderland.modules.timeline.common.provider.TimelineDate;
import org.jdesktop.wonderland.modules.timeline.common.provider.TimelineDateRange;

/**
 * Panel for adding a keyword collection
 * @author nsimpson
 */
public class TimelineAddCollectionPanel extends javax.swing.JPanel {

    private PropertyChangeSupport listeners;
    private TimelineDateRange range;

    public TimelineAddCollectionPanel() {
        initComponents();
    }

    /**
     * Adds a bound property listener to the dialog
     * @param listener a listener for dialog events
     */
    @Override
    public synchronized void addPropertyChangeListener(PropertyChangeListener listener) {
        if (listeners == null) {
            listeners = new PropertyChangeSupport(this);
        }
        listeners.addPropertyChangeListener(listener);
    }

    /**
     * Removes a bound property listener from the dialog
     * @param listener the listener to remove
     */
    @Override
    public synchronized void removePropertyChangeListener(PropertyChangeListener listener) {
        if (listeners != null) {
            listeners.removePropertyChangeListener(listener);
        }
    }

    /**
     * Set the date range for this dialog
     * @param range the range of dates to build the dialog for
     */
    public void setDateRange(TimelineDateRange range) {
        if (this.range != null && this.range.equals(range)) {
            return;
        }

        this.range = range;

        DateFormat df;
        switch (range.getUnits()) {
            case Calendar.HOUR:
                df = DateFormat.getTimeInstance();
                break;
            case Calendar.DAY_OF_YEAR:
                df = new SimpleDateFormat("dd MMM");
                break;
            case Calendar.MONTH:
                df = new SimpleDateFormat("MMM");
                break;
            case Calendar.YEAR:
                df = new SimpleDateFormat("yyyy");
                break;
            default:
                df = DateFormat.getInstance();
                break;
        }

        DefaultTableModel model = (DefaultTableModel) collectionTable.getModel();

        // clear the model
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }

        // add in the new rows
        for (int i = 0; i < range.getIncrementCount(); i++) {
            TimelineDate date = range.getIncrement(i);

            System.out.println("Adding date " + df.format(date.getMinimum()));

            model.addRow(new String[] { df.format(date.getMinimum()), "" });
        }

        collectionTable.invalidate();
        collectionTable.repaint();
    }

    public List<String> getQueries() {
        List<String> out = new ArrayList<String>();
        DefaultTableModel model = (DefaultTableModel) collectionTable.getModel();

        for (int i = 0; i < model.getRowCount(); i++) {
            out.add((String) model.getValueAt(i, 1));
        }

        System.out.println("Returning " + out.size() + " keywords");
        
        return out;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        collectionLabel = new javax.swing.JLabel();
        collectionScrollPane = new javax.swing.JScrollPane();
        collectionTable = new javax.swing.JTable();
        doneButton = new javax.swing.JButton();

        collectionLabel.setFont(collectionLabel.getFont().deriveFont(collectionLabel.getFont().getStyle() | java.awt.Font.BOLD));
        collectionLabel.setText("Create Keyword Collection");

        collectionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Date", "Keywords"
            }
        ));
        collectionTable.setGridColor(new java.awt.Color(204, 204, 204));
        collectionScrollPane.setViewportView(collectionTable);

        doneButton.setText("Done");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(collectionScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(collectionLabel))
                    .add(doneButton))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(collectionLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(collectionScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(doneButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
        listeners.firePropertyChange("done", new String(""), null);
    }//GEN-LAST:event_doneButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel collectionLabel;
    private javax.swing.JScrollPane collectionScrollPane;
    private javax.swing.JTable collectionTable;
    private javax.swing.JButton doneButton;
    // End of variables declaration//GEN-END:variables
}
