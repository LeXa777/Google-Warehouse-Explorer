/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SharedStateTestFrame.java
 *
 * Created on Jan 20, 2009, 3:36:02 PM
 */

package org.jdesktop.wonderland.modules.sharedstatetest.client;

import java.io.PrintWriter;
import java.io.Writer;
import java.math.BigInteger;
import java.util.Map;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineFactory;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import javax.swing.SwingUtilities;
import org.jdesktop.wonderland.client.cell.Cell;
import org.jdesktop.wonderland.client.comms.WonderlandSession;
import org.jdesktop.wonderland.client.login.LoginManager;
import org.jdesktop.wonderland.modules.sharedstate.client.SharedMapCli;
import org.jdesktop.wonderland.modules.sharedstate.client.SharedMapListenerCli;
import org.jdesktop.wonderland.modules.sharedstate.client.SharedStateComponent;
import org.jdesktop.wonderland.modules.sharedstate.common.SharedData;
import org.jdesktop.wonderland.modules.sharedstate.common.SharedInteger;
import org.jdesktop.wonderland.modules.sharedstate.common.SharedMap;
import org.jdesktop.wonderland.modules.sharedstate.common.SharedString;

/**
 *
 * @author jkaplan
 */
public class SharedStateTestFrame extends javax.swing.JFrame {
    private ScriptEngine engine;
    private PrintWriter out;

    /** Creates new form SharedStateTestFrame */
    public SharedStateTestFrame(Cell cell) {
        out = new PrintWriter(new ResultWriter(), true);

        initComponents();
        initScriptEngine(cell);
    }

    private void initScriptEngine(Cell cell) {
        // get the shared state component
        SharedStateComponent comp = cell.getComponent(SharedStateComponent.class);

        // get the classloader associated with the cell
        WonderlandSession session = cell.getCellCache().getSession();
        ClassLoader cl = LoginManager.find(session).getClassloader();

        ScriptEngineManager factory = new ScriptEngineManager(cl);
        for (ScriptEngineFactory ef : factory.getEngineFactories()) {
            System.out.println("[ScriptEngine]: " + ef.getEngineName());
            System.out.println("[ScriptEngine]: AKA: ");
            for (String name : ef.getNames()) {
                System.out.println("[ScriptEngine]:    " + name);
            }
        }

        // create a JavaScript engine
        engine = factory.getEngineByName("JavaScript");
        engine.put("shared", comp);
        engine.put("mapdata", comp.get("testmap"));
        engine.put("map", new MapAccess(comp.get("testmap"), out));
        engine.put("out", out);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scriptField = new javax.swing.JTextField();
        goButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultArea = new javax.swing.JTextArea();

        scriptField.setText("<enter script here>");
        scriptField.setToolTipText("Enter script to run");
        scriptField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scriptFieldActionPerformed(evt);
            }
        });

        goButton.setText("Go!");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        resultArea.setColumns(20);
        resultArea.setEditable(false);
        resultArea.setRows(5);
        jScrollPane1.setViewportView(resultArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scriptField, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(goButton))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scriptField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(goButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        String cmd = scriptField.getText();
        if (cmd.trim().length() == 0) {
            return;
        }

        resultArea.append("> " + cmd + "\n");
        try {
            engine.eval(cmd);
        } catch (ScriptException se) {
            se.printStackTrace(out);
        }
    }//GEN-LAST:event_goButtonActionPerformed

    private void scriptFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scriptFieldActionPerformed
        goButtonActionPerformed(evt);
    }//GEN-LAST:event_scriptFieldActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton goButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea resultArea;
    private javax.swing.JTextField scriptField;
    // End of variables declaration//GEN-END:variables

    class ResultWriter extends Writer {
        StringBuffer buffer = new StringBuffer();

        @Override
        public synchronized void write(char[] cbuf, int off, int len) {
            buffer.append(cbuf, off, len);
        }

        @Override
        public synchronized Writer append(CharSequence csq, int start, int end) {
            buffer.append(csq, start, end);
            return this;
        }

        @Override
        public synchronized void write(String str, int off, int len) {
            buffer.append(str, off, len);
        }

        @Override
        public synchronized void flush() {
            // get the current value of the buffer
            final String value = buffer.toString();
            buffer = new StringBuffer();

            // write it
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    resultArea.append(value);
                }
            });
        }

        @Override
        public void close() {
            flush();
        }
    }

    public static class MapAccess implements SharedMapListenerCli {
        private SharedMap map;
        private PrintWriter out;

        public MapAccess(SharedMapCli map, PrintWriter out) {
            this.map = map;
            this.out = out;

            // add a listener to receive notifications
            map.addSharedMapListener(this);
        }

        public void put(String key, String value) {
            out.println(toString(map.put(key, SharedString.valueOf(value))));
        }

        public void put(String key, int value) {
            out.println(toString(map.put(key, SharedInteger.valueOf(value))));
        }

        public void get(String key) {
            out.println(toString(map.get(key)));
        }

        public void remove(String key) {
            out.println(toString(map.remove(key)));
        }

        public void printMap() {
            out.println("Map " + map.getName() + " size: " + map.size());

            for (Map.Entry<String, SharedData> e : map.entrySet()) {
                out.println(e.getKey() + " = " + toString(e.getValue()));
            }
        }

        public void propertyChanged(SharedMapCli map, BigInteger senderID,
                                    String key, SharedData prevVal,
                                    SharedData newVal)
        {
            String prevStr = (prevVal == null) ? null : prevVal.toString();
            String newStr = (newVal == null) ? null : newVal.toString();

            out.println("Map " + map.getName() + " Update from: " + senderID);
            out.println("  " + key + " prev: " + prevStr + " new: " + newStr);
        }

        String toString(SharedData value) {
            if (value == null) {
                return "null";
            } else {
                return value.toString();
            }
        }
    }
}
