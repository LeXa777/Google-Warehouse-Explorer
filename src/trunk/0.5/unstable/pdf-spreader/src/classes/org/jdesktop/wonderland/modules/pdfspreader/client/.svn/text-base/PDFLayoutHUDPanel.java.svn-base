/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */

package org.jdesktop.wonderland.modules.pdfspreader.client;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.jdesktop.wonderland.client.cell.Cell;
import org.jdesktop.wonderland.modules.pdfspreader.common.PDFSpreaderCellChangeMessage.LayoutType;
import org.jdesktop.wonderland.modules.presentationbase.client.PresentationCell;

/**
 *
 * @author Drew Harry <drew_harry@dev.java.net>
 */
public class PDFLayoutHUDPanel extends javax.swing.JPanel implements ActionListener {

    private static final Logger logger =
        Logger.getLogger(PDFLayoutHUDPanel.class.getName());


    private PDFSpreaderCell cell;

    private ButtonGroup layoutButtons;

    private final static String LINEAR_COMMAND = "linear";
    private final static String SEMICIRCLE_COMMAND = "semicircle";
    private final static String CIRCLE_COMMAND = "cicle";

    /** Creates new form PDFLayoutHUDPanel */
    public PDFLayoutHUDPanel(PDFSpreaderCell c) {
        initComponents();

        this.cell = c;

        layoutButtons = new ButtonGroup();
        layoutButtons.add(linearButton);
        layoutButtons.add(semicircleButton);
        layoutButtons.add(circleButton);

        // Make sure the HUD has the right intial state. 
        switch(c.getLayout()) {
            case LINEAR:
                linearButton.setSelected(true);
                break;
            case SEMICIRCLE:
                semicircleButton.setSelected(true);
                break;
            case CIRCLE:
                circleButton.setSelected(true);
                break;
            default:
                break;
        }

        // setup button listeners. 
        linearButton.setActionCommand(LINEAR_COMMAND);
        linearButton.addActionListener(this);
        semicircleButton.addActionListener(this);
        semicircleButton.setActionCommand(SEMICIRCLE_COMMAND);
        circleButton.addActionListener(this);
        circleButton.setActionCommand(CIRCLE_COMMAND);

        // setup listeners for changes on the sliders.
        scaleSlider.addChangeListener(new ChangeListener() {

            public void stateChanged(ChangeEvent e) {

                // scale appropriately here - the slider is 0-100, and we want
                // scale to be bounded 0->4.0
                cell.setScale((float) (scaleSlider.getValue() / 100.0 * 4.0));
                cell.sendCurrentLayoutToServer();
            }

        });

        spacingSlider.addChangeListener(new ChangeListener() {

            public void stateChanged(ChangeEvent e) {

                // scale appropriately here - the slider is 0-100, and we want
                // scale to be bounded 0->4.0
                float spacing = 0.0f;
                if(cell.getLayout()==LayoutType.LINEAR) {
                    spacing = (float) (spacingSlider.getValue() / 100.0 * 15.0);
                }
                else {
                    spacing = (float) (spacingSlider.getValue() / 100.0 * 75.0);
                }

                cell.setSpacing(spacing);
                cell.sendCurrentLayoutToServer();
            }

        });

    }

    public void setCell(PDFSpreaderCell cell) {
        this.cell = cell;

        // this should get the current values for scale / spacing
        // although given the poor behavior of the embedded slider it
        // doesn't really help much to have those values set properly to begin
        // with. 
    }

    /**
     * Indicates that this HUD panel has been closed
     */
    public void closed() {
        // Also close the Details position HUD panel
//        positionHUD.setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jRadioButton2 = new javax.swing.JRadioButton();
        scaleSlider = new javax.swing.JSlider();
        spacingSlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        linearButton = new javax.swing.JRadioButton();
        semicircleButton = new javax.swing.JRadioButton();
        circleButton = new javax.swing.JRadioButton();
        createPresentationButton = new javax.swing.JButton();

        jRadioButton2.setText("jRadioButton2");

        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 4;
        add(scaleSlider, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 4;
        add(spacingSlider, gridBagConstraints);

        jLabel1.setText("Slide Scale");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        add(jLabel1, gridBagConstraints);

        jLabel2.setText("Slide Spacing");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        add(jLabel2, gridBagConstraints);

        linearButton.setText("Linear");
        linearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linearButtonActionPerformed(evt);
            }
        });

        semicircleButton.setText("Semicircle");

        circleButton.setText("Circle");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(semicircleButton)
                    .addComponent(circleButton)
                    .addComponent(linearButton)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(linearButton)
                .addGap(5, 5, 5)
                .addComponent(semicircleButton)
                .addGap(5, 5, 5)
                .addComponent(circleButton))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        add(jPanel1, gridBagConstraints);

        createPresentationButton.setText("Create Presentation Space");
        createPresentationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPresentationButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(createPresentationButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void linearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linearButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_linearButtonActionPerformed

    private void createPresentationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPresentationButtonActionPerformed
        // Make a call into the presentation manager to tell it that this PDF wants to be
        // turned into a full presentation space.

        PresentationCell.createPresentationSpace((Cell)cell);

    }//GEN-LAST:event_createPresentationButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton circleButton;
    private javax.swing.JButton createPresentationButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton linearButton;
    private javax.swing.JSlider scaleSlider;
    private javax.swing.JRadioButton semicircleButton;
    private javax.swing.JSlider spacingSlider;
    // End of variables declaration//GEN-END:variables

    public void actionPerformed(ActionEvent arg0) {
        if(arg0.getActionCommand().equals(LINEAR_COMMAND)) {
           cell.setLayout(LayoutType.LINEAR);
        } else if(arg0.getActionCommand().equals(SEMICIRCLE_COMMAND)) {
            cell.setLayout(LayoutType.SEMICIRCLE);
        } else if(arg0.getActionCommand().equals(CIRCLE_COMMAND)) {
            cell.setLayout(LayoutType.CIRCLE);
        }

        cell.sendCurrentLayoutToServer();
    }
}
