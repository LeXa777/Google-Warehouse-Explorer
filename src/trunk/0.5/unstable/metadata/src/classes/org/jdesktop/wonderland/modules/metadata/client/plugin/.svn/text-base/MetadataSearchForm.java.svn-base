/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */

package org.jdesktop.wonderland.modules.metadata.client.plugin;

import java.awt.event.ActionListener;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import org.jdesktop.wonderland.modules.metadata.client.MetadataTypesTable;
import org.jdesktop.wonderland.modules.metadata.common.Metadata;
import org.jdesktop.wonderland.modules.metadata.common.MetadataSearchFilters;
import org.jdesktop.wonderland.modules.metadata.common.MetadataValue;

/**
 * Uses MetadataTypesTable for users to enter Metadata. Entered Metadata then
 * translated into search filters. 
 * 
 * Wildcards like * are allowed.
 *
 * @author mabonner
 */
public class MetadataSearchForm extends javax.swing.JFrame implements TableModelListener, ListSelectionListener{

    // TODO could not add MetadataTypesTable to NetBeans GUI Builder
    // workaround: use customize code to make basicTabs instantiated as
    // a MTT. Cast basicTabs to an MTT and use the tabs reference instead.
    private MetadataTypesTable tabs;

    private static Logger logger = Logger.getLogger(MetadataSearchForm.class.getName());
    
    /** Creates new form MetadataSearchForm */
    public MetadataSearchForm(ActionListener plugin) {
      initComponents();
      // work-around for NetBeans GUI builder
      // see comment where tabs is declared
      tabs = (MetadataTypesTable) basicTabs;
      tabs.setTableCellsEditable(MetadataTypesTable.AllowEdits.ALWAYS);

      // add listeners
      tabs.registerListSelectionListener(new RemoveButtonSelectionListener());
      tabs.registerTableModelListener(this);

      // plugin listens to search button
      searchButton.addActionListener(plugin);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    searchButton = new javax.swing.JButton();
    basicTabs = new MetadataTypesTable();
    controls = new javax.swing.JPanel();
    removeButton = new javax.swing.JButton();
    addButton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

    jLabel1.setText("Search Metadata");

    searchButton.setText("Search");
    searchButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        searchButtonActionPerformed(evt);
      }
    });

    basicTabs.setPreferredSize(new java.awt.Dimension(32767, 32767));

    controls.setBackground(new java.awt.Color(204, 204, 255));

    removeButton.setText("-");
    removeButton.setEnabled(false);
    removeButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        removeButtonActionPerformed(evt);
      }
    });

    addButton.setText("+");
    addButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        addButtonActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout controlsLayout = new javax.swing.GroupLayout(controls);
    controls.setLayout(controlsLayout);
    controlsLayout.setHorizontalGroup(
      controlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(controlsLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(controlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(removeButton)
          .addComponent(addButton))
        .addContainerGap(16, Short.MAX_VALUE))
    );
    controlsLayout.setVerticalGroup(
      controlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(controlsLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(addButton)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(removeButton)
        .addContainerGap(42, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1)
        .addContainerGap(424, Short.MAX_VALUE))
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap(447, Short.MAX_VALUE)
        .addComponent(searchButton))
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap(429, Short.MAX_VALUE)
        .addComponent(controls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
          .addContainerGap()
          .addComponent(basicTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addContainerGap(126, Short.MAX_VALUE)))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1)
        .addGap(16, 16, 16)
        .addComponent(controls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 179, Short.MAX_VALUE)
        .addComponent(searchButton)
        .addContainerGap())
      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
          .addGap(21, 21, 21)
          .addComponent(basicTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addContainerGap(30, Short.MAX_VALUE)))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
//      logger.info("[META SEARCH FORM] search button clicked");
      
    }//GEN-LAST:event_searchButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
      tabs.removeCurrentlySelectedRow();
}//GEN-LAST:event_removeButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
      tabs.createNewBlankMetadataOnCurrentTab();
}//GEN-LAST:event_addButtonActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton addButton;
  private javax.swing.JTabbedPane basicTabs;
  private javax.swing.JPanel controls;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JButton removeButton;
  private javax.swing.JButton searchButton;
  // End of variables declaration//GEN-END:variables

  public MetadataSearchFilters getFilters(){
    MetadataSearchFilters filters = new MetadataSearchFilters();
    for(int i = 0; i < tabs.getComponentCount(); i++){
      try {
        for (Metadata m : tabs.getMetadataFromTab(i)) {
          // surround each attribute with wildcards
          // this will make the search 'contains' instead of 'is exactly'
          for(Map.Entry<String, MetadataValue> e: m.getAttributes()){
            MetadataValue metaVal = e.getValue();
            String val = e.getValue().getVal();
            if(val == null){
              val = "";
            }
            val = "*" + val + "*";
            metaVal.setVal(val);
            m.put(e.getKey(), metaVal);
          }
          filters.addFilter(m);
        }
      } catch (Exception ex) {
        Logger.getLogger(MetadataSearchForm.class.getName()).log(Level.SEVERE, null, ex);
      }
    }
//    channel.send(new MetadataMessage(MetadataMessage.Action.SEARCH, meta));
    return filters;
  }

  public void tableChanged(TableModelEvent tme) {
     logger.info("[search] table changed, repaint");
     repaint();
  }
  
  public void valueChanged(ListSelectionEvent e) {
    logger.info("[search] item selected in table");
      boolean enabled = false;

      if (!e.getValueIsAdjusting()) {
          enabled = (tabs.getCurrentTable().getSelectedRow() >= 0);
      }

      removeButton.setEnabled(enabled);
      repaint();
  }

  class RemoveButtonSelectionListener implements ListSelectionListener {
        public void valueChanged(ListSelectionEvent e) {
            boolean enabled = false;

            if (!e.getValueIsAdjusting()) {
                enabled = (tabs.getCurrentTable().getSelectedRow() >= 0);
            }

            removeButton.setEnabled(enabled);
        }
    }





}
