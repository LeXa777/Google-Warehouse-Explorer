/**
 * Open Wonderland
 *
 * Copyright (c) 2010, Open Wonderland Foundation, All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * The Open Wonderland Foundation designates this particular file as
 * subject to the "Classpath" exception as provided by the Open Wonderland
 * Foundation in the License file that accompanied this code.
 */
package org.jdesktop.wonderland.modules.videoplayer.client;

import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 * A slider and spinner to control volume
 * @author Jonathan Kaplan <jonathankap@gmail.com>
 */
public class VolumeSlider extends javax.swing.JPanel {
    private final List<ChangeListener> changeListeners =
            new CopyOnWriteArrayList<ChangeListener>();

    /** Creates new form VolumeSlider */
    public VolumeSlider() {
        initComponents();

        volumeSlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                int value = volumeSlider.getValue();
                volumeSpinner.setValue(sliderToVolume(value));
            }
        });

        volumeSpinner.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                float value = (Float) volumeSpinner.getValue();
                volumeSlider.setValue(volumeToSlider(value));

                fireChangeEvent();
            }
        });
    }

    /**
     * Get the volume this slider represents
     * @return the volume (between 0.0 and 10.0)
     */
    public float getVolume() {
        return (Float) volumeSpinner.getValue();
    }

    /**
     * Set the volume this slider represents
     * @param volume the volume to set (between 0.0 and 10.0)
     */
    public void setVolume(float volume) {
        volumeSpinner.setValue(volume);
    }

    /**
     * Add a change listener that will be notified of changes to this
     * component.
     * @param listener the listener to add
     */
    public void addChangeListener(ChangeListener listener) {
        changeListeners.add(listener);
    }

    /**
     * Remove a change listener
     * @param listener the listener to remove
     */
    public void removeChangeListener(ChangeListener listener) {
        changeListeners.remove(listener);
    }

    /**
     * Fire a change event
     */
    protected void fireChangeEvent() {
        for (ChangeListener listener : changeListeners) {
            listener.stateChanged(new ChangeEvent(this));
        }
    }

    /**
     * Convert a slider value to a volume
     */
    private float sliderToVolume(int slider) {
        if (slider <= 10) {
            return (float) slider / 10f;
        }

        return (float) Math.pow(10f, (slider - 10f) / 10f);
    }

    /**
     * Convert a volume to a slider value
     */
    private int volumeToSlider(float volume) {
        if (volume <= 1f) {
            return (int) Math.round(volume * 10f);
        }

        return (int) Math.round(Math.log10(volume) * 10f) + 10;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        volumeSlider = new javax.swing.JSlider();
        volumeSpinner = new javax.swing.JSpinner();

        volumeSlider.setMajorTickSpacing(10);
        volumeSlider.setMaximum(20);
        volumeSlider.setMinorTickSpacing(1);
        volumeSlider.setPaintTicks(true);
        volumeSlider.setSnapToTicks(true);
        volumeSlider.setValue(10);

        volumeSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(0.0f), Float.valueOf(10.0f), Float.valueOf(0.25f)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(volumeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(volumeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(volumeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(volumeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider volumeSlider;
    private javax.swing.JSpinner volumeSpinner;
    // End of variables declaration//GEN-END:variables

}
