/**
 * Open Wonderland
 *
 * Copyright (c) 2010, Open Wonderland Foundation, All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * The Open Wonderland Foundation designates this particular file as
 * subject to the "Classpath" exception as provided by the Open Wonderland
 * Foundation in the License file that accompanied this code.
 */
package org.jdesktop.wonderland.modules.videoplayer.client;

import java.util.ResourceBundle;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.jdesktop.wonderland.client.cell.properties.CellPropertiesEditor;
import org.jdesktop.wonderland.client.cell.properties.annotation.PropertiesFactory;
import org.jdesktop.wonderland.client.cell.properties.spi.PropertiesFactorySPI;
import org.jdesktop.wonderland.modules.sharedstate.client.SharedMapCli;
import org.jdesktop.wonderland.modules.sharedstate.client.SharedStateComponent;
import org.jdesktop.wonderland.modules.sharedstate.common.SharedString;
import org.jdesktop.wonderland.modules.videoplayer.client.cell.VideoPlayerCell;
import org.jdesktop.wonderland.modules.videoplayer.common.VideoPlayerConstants;
import org.jdesktop.wonderland.modules.videoplayer.common.cell.VideoPlayerCellServerState;

/**
 *
 * @author Jonathan
 */
@PropertiesFactory(VideoPlayerCellServerState.class)
public class VideoPlayerCellProperties extends javax.swing.JPanel
    implements PropertiesFactorySPI
{
    private static final Logger LOGGER =
            Logger.getLogger(VideoPlayerCellProperties.class.getName());
    private static final ResourceBundle BUNDLE =
            ResourceBundle.getBundle("org/jdesktop/wonderland/modules/videoplayer/client/resources/Bundle");

    private CellPropertiesEditor editor;

    private float origVolume;
    private float origRadius;

    private Float previewVolume;

    /** Creates new form VideoPlayerCellProperties */
    public VideoPlayerCellProperties() {
        initComponents();

        volumeSlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                checkDirty();
                preview();
            }
        });

        radiusSlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                int value = radiusSlider.getValue();
                radiusSpinner.setValue((float) value);
            }
        });

        radiusSpinner.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                float value = (Float) radiusSpinner.getValue();
                radiusSlider.setValue((int) Math.round(value));
                checkDirty();
            }
        });
    }

    protected void preview() {
        VideoPlayerCell cell = (VideoPlayerCell) editor.getCell();
        VideoPlayerWindow window = cell.getWindow();

        if (window == null) {
            return;
        }

        if (previewVolume == null) {
            previewVolume = window.getVolume();
        }

        window.setVolume(volumeSlider.getVolume());
    }

    protected void endPreview() {
        VideoPlayerCell cell = (VideoPlayerCell) editor.getCell();
        VideoPlayerWindow window = cell.getWindow();

        if (window != null && previewVolume != null) {
            window.setVolume(previewVolume);
        }

        previewVolume = null;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        radiusSlider = new javax.swing.JSlider();
        radiusSpinner = new javax.swing.JSpinner();
        volumeSlider = new org.jdesktop.wonderland.modules.videoplayer.client.VolumeSlider();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/jdesktop/wonderland/modules/videoplayer/client/resources/Bundle"); // NOI18N
        jLabel1.setText(bundle.getString("VideoPlayerCellProperties.jLabel1.text")); // NOI18N

        jLabel2.setText(bundle.getString("VideoPlayerCellProperties.jLabel2.text")); // NOI18N

        radiusSlider.setMajorTickSpacing(10);
        radiusSlider.setPaintTicks(true);
        radiusSlider.setValue(30);

        radiusSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(30.0f), Float.valueOf(0.0f), Float.valueOf(100.0f), Float.valueOf(5.0f)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(radiusSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radiusSpinner))
                    .addComponent(volumeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel1))
                    .addComponent(volumeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(radiusSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(radiusSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(156, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public String getDisplayName() {
        return BUNDLE.getString("VIDEO_PLAYER");
    }

    public void setCellPropertiesEditor(CellPropertiesEditor editor) {
        this.editor = editor;
    }

    public JPanel getPropertiesJPanel() {
        return this;
    }

    public void open() {
        LOGGER.fine("Open");

        SharedStateComponent ssc = editor.getCell().getComponent(SharedStateComponent.class);
        SharedMapCli statusMap = ssc.get(VideoPlayerConstants.STATUS_MAP);

        origVolume = Float.valueOf(statusMap.get(VideoPlayerConstants.VOLUME,
                                   SharedString.class).getValue());
        origRadius = Float.valueOf(statusMap.get(VideoPlayerConstants.AUDIO_RADIUS,
                                   SharedString.class).getValue());

        restore();
    }

    public void close() {
        LOGGER.fine("Close");

        endPreview();
    }

    public void restore() {
        LOGGER.fine("Restore");

        volumeSlider.setVolume(origVolume);
        radiusSpinner.setValue(origRadius);

        endPreview();
    }

    public void apply() {
        LOGGER.fine("Apply");

        VideoPlayerCellServerState vpcss = (VideoPlayerCellServerState)
                editor.getCellServerState();
        vpcss.setVolume(volumeSlider.getVolume());
        vpcss.setAudioRadius((Float) radiusSpinner.getValue());

        editor.addToUpdateList(vpcss);

        endPreview();
    }

    private void checkDirty() {
        if (volumeSlider.getVolume() != origVolume ||
            !radiusSpinner.getValue().equals(origRadius))
        {
            editor.setPanelDirty(VideoPlayerCellProperties.class, true);
        } else {
            editor.setPanelDirty(VideoPlayerCellProperties.class, false);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSlider radiusSlider;
    private javax.swing.JSpinner radiusSpinner;
    private org.jdesktop.wonderland.modules.videoplayer.client.VolumeSlider volumeSlider;
    // End of variables declaration//GEN-END:variables

}
