/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2010, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */

package org.jdesktop.wonderland.modules.audiorecorder.client;

import java.awt.Component;
import java.util.ResourceBundle;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.jdesktop.wonderland.modules.audiorecorder.common.Tape;

/**
 * A form from which the user can select a tape, or add a new tape
 * @author  Bernard Horan
 */
public class ReelForm extends javax.swing.JFrame {
    private static final Logger reelFormLogger = Logger.getLogger(ReelForm.class.getName());
    
    private AudioRecorderCell audioRecorderCell;
    private static final ResourceBundle bundle = ResourceBundle.getBundle("org/jdesktop/wonderland/modules/audiorecorder/client/resources/Bundle");
    private boolean selectionChanged = false;

    public ReelForm() {
        initComponents();
    }
    
    /** 
     * Creates new form ReelForm
     * @param audioRecorderCell the cell to which the form is connected
     */
    public ReelForm(AudioRecorderCell audioRecorderCell) {
        this.audioRecorderCell = audioRecorderCell;
        initComponents();
        tapesList.setCellRenderer(new TapeListRenderer());
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        tapesList.setModel(audioRecorderCell.getTapeListModel());
        ListSelectionModel tapeSelectionModel = audioRecorderCell.getTapeSelectionModel();
        tapesList.setSelectionModel(tapeSelectionModel);
        tapeSelectionModel.addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                reelFormLogger.info("value changed");
                selectionChanged = true;
            }
        });
    }

    void selectTape(final Tape aTape) {
        reelFormLogger.info("select tape: " + aTape);
        selectionChanged = false;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tapesList = new javax.swing.JList();
        doneButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(bundle.getString("TAPES")); // NOI18N
        setAlwaysOnTop(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        tapesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        tapesList.setToolTipText(bundle.getString("LIST_OF_AVAILABLE_TAPES")); // NOI18N
        jScrollPane1.setViewportView(tapesList);

        doneButton.setText(bundle.getString("DONE")); // NOI18N
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        addButton.setText(bundle.getString("ADD")); // NOI18N
        addButton.setToolTipText(bundle.getString("ADD_A_NEW_TAPE")); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 186, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(addButton))
                    .add(doneButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(addButton)
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(doneButton)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        String tapeName=JOptionPane.showInputDialog(this, bundle.getString("ADD_NEW_TAPE"), bundle.getString("UNTITLED"));
        if (tapeName == null) {
            return;
        }
        if (audioRecorderCell.getTapeNames().contains(tapeName)) {
            JOptionPane.showMessageDialog(this,
                                    bundle.getString("A_TAPE_WITH_THAT_NAME_ALREADY_EXISTS"),
                                    bundle.getString("FAILED_TO_ADD_TAPE"),
                                    JOptionPane.ERROR_MESSAGE);
        } else {
            Tape newTape = audioRecorderCell.addTape(tapeName);
            reelFormLogger.info("added a tape: " + newTape);
            tapesList.setSelectedValue(newTape, true);
        }
}//GEN-LAST:event_addButtonActionPerformed

    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
        if (selectionChanged) {
            reelFormLogger.info("selection has changed");
            audioRecorderCell.listSelectionChanged();
            selectionChanged = false;
        }
        setVisible(false);
}//GEN-LAST:event_doneButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        doneButtonActionPerformed(null);
    }//GEN-LAST:event_formWindowClosed
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReelForm().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton doneButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList tapesList;
    // End of variables declaration//GEN-END:variables

    class TapeListRenderer extends JLabel implements ListCellRenderer {
        // This is the only method defined by ListCellRenderer.
        // We just reconfigure the JLabel each time we're called.

        public Component getListCellRendererComponent(
                JList list,
                Object value, // value to display
                int index, // cell index
                boolean isSelected, // is the cell selected
                boolean cellHasFocus) // the list and the cell have the focus
        {
            Tape tape = (Tape) value;
            String s = tape.getTapeName();
            setText(s);
            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }
            setEnabled(list.isEnabled());
            setFont(list.getFont());
            setOpaque(true);
            return this;
        }
    }
}
