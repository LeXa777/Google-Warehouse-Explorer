/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */
package org.jdesktop.wonderland.modules.rockwellcollins.stickynote.client;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;

import java.util.logging.Logger;
import javax.swing.JWindow;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import org.jdesktop.wonderland.modules.rockwellcollins.stickynote.client.cell.StickyNoteCell;
import org.jdesktop.wonderland.modules.rockwellcollins.stickynote.common.cell.StickyNoteCellClientState;
import org.jdesktop.wonderland.modules.rockwellcollins.stickynote.common.messages.StickyNoteSyncMessage;

/**
 * The JPanel displayed in Wonderland for a generic sticky note.
 * @author Ryan (mymegabyte)
 */
public class GenericStickyNotePanel extends javax.swing.JPanel implements ActionListener, FocusListener, StickyNotePanel {

    private JFrame frame;
    private Timer keyTimer;
    private static Logger logger = Logger.getLogger(GenericStickyNotePanel.class.getName());
    private StickyNoteCellClientState lastSyncedState = new StickyNoteCellClientState();
    private StickyNoteCell cell;
    private StickyNoteParentPanel parentPanel = null;

    /** Creates new form GenericStickyNotePanel */
    public GenericStickyNotePanel() {
        initComponents();
        keyTimer = new Timer(1000, this);
        notePane.addFocusListener(this);
    }

    /** Creates new form GenericStickyNotePanel */
    public GenericStickyNotePanel(StickyNoteCell cell, StickyNoteCellClientState state, StickyNoteParentPanel parentP) {
        this();
        this.cell = cell;
        parentPanel = parentP;
        notePane.setText(state.getNoteText());
        setColor(state.getNoteColor());
       
    }

    public void setFrame(JFrame frame) {
        this.frame = frame;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        notePane = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(255, 255, 153));
        setPreferredSize(new java.awt.Dimension(250, 250));
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 153));

        notePane.setBackground(new java.awt.Color(255, 255, 153));
        notePane.setColumns(17);
        notePane.setFont(new java.awt.Font("Verdana", 0, 14));
        notePane.setLineWrap(true);
        notePane.setRows(5);
        notePane.setWrapStyleWord(true);
        jScrollPane1.setViewportView(notePane);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
// TODO add your handling code here:
        //System.out.println("Panel focus Gained");
    }//GEN-LAST:event_formFocusGained
    private boolean ortho = false;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea notePane;
    // End of variables declaration//GEN-END:variables

    public static void main(String args[]) {
        JWindow j = new JWindow();
        //JFrame j = new JFrame();
//        j.addMouseMotionListener(new MouseMotionAdapter() {
//           public void mouseMoved(java.awt.event.MouseEvent evt) {
//                System.out.println(evt);
//            }
//        });
        System.out.println(j.getLayout());
        j.add(new GenericStickyNotePanel());
        j.pack();
        j.setVisible(true);
    }

    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == keyTimer) {
            // Check to see if we need to send a message w/ new text to the clients
            checkSendChanges();
        }
    }

    public void focusGained(FocusEvent e) {
        keyTimer.start();
    }

    public void focusLost(FocusEvent e) {
        keyTimer.stop();
        checkSendChanges();
    }

    private synchronized void checkSendChanges() {
        if (lastSyncedState == null || !lastSyncedState.getNoteText().equals(notePane.getText())) {
            // We need to send our changes
            lastSyncedState.setNoteText(notePane.getText());

            cell.sendSyncMessage(lastSyncedState);
        }
    }

    public void processMessage(final StickyNoteSyncMessage pcm) {
        lastSyncedState = pcm.getState();

        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                notePane.setText(pcm.getState().getNoteText());
                setColor(pcm.getState().getNoteColor());
                repaint();
            }
        });
    }

    public void setColor(String color) {
        Color newColor = StickyNoteCell.parseColorString(color);

        this.setBackground(newColor);
        jScrollPane1.setBackground(newColor);
        notePane.setBackground(newColor);
        parentPanel.setBackground(newColor);
        lastSyncedState.setNoteColor(color);
    }
}
