/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */
package org.jdesktop.wonderland.modules.rockwellcollins.stickynote.client;

import java.util.logging.Logger;
import javax.swing.JWindow;
import javax.swing.JFrame;
import javax.swing.JPanel;
import org.jdesktop.wonderland.modules.rockwellcollins.stickynote.client.cell.StickyNoteCell;
import org.jdesktop.wonderland.modules.rockwellcollins.stickynote.common.cell.StickyNoteCellClientState;
import org.jdesktop.wonderland.modules.rockwellcollins.stickynote.common.cell.StickyNoteTypes;

/**
 * The parent jpanel to hold StickyNotePanels.
 * @author Ryan (mymegabyte)
 */
public class StickyNoteParentPanel extends javax.swing.JPanel {

    public interface Container {

        public void validate();

        public void setOrtho(boolean ortho);
    }
    private JFrame frame;
    private Container container;
    private StickyNoteCell cell;
    private StickyNotePanel child;
    /** The logger used by this class */
    private static final Logger logger = Logger.getLogger(StickyNoteParentPanel.class.getName());

    /** Creates new form GenericStickyNotePanel */
    public StickyNoteParentPanel() {
        initComponents();
    }

    /** Creates new form GenericStickyNotePanel */
    public StickyNoteParentPanel(StickyNoteCell cell, StickyNoteCellClientState state) {
        this();
        this.cell = cell;
        if (state.getNoteType().equals(StickyNoteTypes.GENERIC)) {
            child = new GenericStickyNotePanel(cell, state, this);
        } else if (state.getNoteType().equals(StickyNoteTypes.TASK)) {
            child = new TaskStickyNotePanel(cell, state, this);
        } else {
            logger.severe("Unrecognized note type: " + state.getNoteType());
        }
        add((JPanel) child);
    }

    public void setFrame(JFrame frame) {
        this.frame = frame;
    }

    public void setContainer(Container container) {
        this.container = container;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 153));
        setPreferredSize(null);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
    }//GEN-LAST:event_formFocusGained
    private boolean ortho = false;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public static void main(String args[]) {
        JWindow j = new JWindow();
        System.out.println(j.getLayout());
        j.add(new StickyNoteParentPanel());
        j.pack();
        j.setVisible(true);
    }

    public StickyNotePanel getChild() {
        return child;
    }
}
