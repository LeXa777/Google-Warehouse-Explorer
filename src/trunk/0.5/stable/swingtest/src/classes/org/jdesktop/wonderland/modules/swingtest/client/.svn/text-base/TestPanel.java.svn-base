/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */

package org.jdesktop.wonderland.modules.swingtest.client;


import javax.swing.JWindow;
import javax.swing.JFrame;

/**
 *
 */
public class TestPanel extends javax.swing.JPanel {
    
    public interface Container {
        public void validate();
        public void setOrtho(boolean ortho);
    }

    private JFrame frame;
    private Container container;

    /** Creates new form TestPanel */
    public TestPanel() {
        initComponents();
    }

    public void setFrame (JFrame frame) {
	this.frame = frame;
    }

    public void setContainer (Container container) {
        this.container = container;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        styleBumpShaderRB = new javax.swing.JRadioButton();
        styleNormalRB = new javax.swing.JRadioButton();
        jSlider1 = new javax.swing.JSlider();
        // For vertical slider debugging
        //jSlider1 = new javax.swing.JSlider(javax.swing.JSlider.VERTICAL);

	jSlider1.setToolTipText("This is a slider");

        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("My Label");
	jLabel1.setToolTipText("This is a label");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        add(jLabel1, gridBagConstraints);

        jButton1.setText("Move to Glass");
	jButton1.setToolTipText("This button moves the window onto the monitor glass");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        add(jButton1, gridBagConstraints);

        jButton2.setText("Add Slider");
	jButton2.setToolTipText("This button adds a slider to the window");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        add(jButton2, gridBagConstraints);

        jTextField1.setColumns(8);
        jTextField1.setText("jTextField1");
	jTextField1.setToolTipText("This is a text field");
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField1FocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        add(jTextField1, gridBagConstraints);

	jPanel1.setToolTipText("This is a panel for selecting the rendering style");
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Rendering Style"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(styleBumpShaderRB);
        styleBumpShaderRB.setText("Bump Shader");
        styleBumpShaderRB.setToolTipText("This button selects bump mapped rendering");
        styleBumpShaderRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                styleBumpShaderRBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(styleBumpShaderRB, gridBagConstraints);

        buttonGroup1.add(styleNormalRB);
        styleNormalRB.setText("Normal");
        styleNormalRB.setToolTipText("This button selects normal rendering");
        styleNormalRB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        styleNormalRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                styleNormalRBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(styleNormalRB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(jPanel1, gridBagConstraints);
        //add(jSlider1, new java.awt.GridBagConstraints());
    }// </editor-fold>//GEN-END:initComponents

    private void styleNormalRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_styleNormalRBActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_styleNormalRBActionPerformed

    private void styleBumpShaderRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_styleBumpShaderRBActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_styleBumpShaderRBActionPerformed

    private void jTextField1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusGained
// TODO add your handling code here:
        //System.out.println("TF Focus gained");
    }//GEN-LAST:event_jTextField1FocusGained

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
// TODO add your handling code here:
        //System.out.println("Panel focus Gained");
    }//GEN-LAST:event_formFocusGained

    private boolean ortho = false;

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        ortho = ! ortho;

        if (ortho) {
            jButton1.setText("Move to World");
            jButton1.setToolTipText("This button moves the window into the world.");
        } else {
            jButton1.setText("Move to Glass");
            jButton1.setToolTipText("This button moves the window onto the monitor glass");
        }

        jPanel1.invalidate();

        if (container != null) {
            container.setOrtho(ortho);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private boolean sliderShown = false;

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    if (sliderShown) {
	// Remove slider
	remove(jSlider1);
        jButton2.setText("Add Slider");
	jButton2.setToolTipText("This button adds a slider to the window");
    } else {
	// Remove slider
	add(jSlider1, new java.awt.GridBagConstraints());
        jButton2.setText("Remove Slider");
	jButton2.setToolTipText("This button removes a slider from the window");
    }

    jPanel1.invalidate();

    // In the standalone test TestTestPanel, we have a frame that we must repack
    if (frame != null) {
	frame.pack();
    }

    if (container != null) {
        container.validate();
    }

    sliderShown = ! sliderShown;

}//GEN-LAST:event_jButton2ActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JRadioButton styleBumpShaderRB;
    private javax.swing.JRadioButton styleNormalRB;
    // End of variables declaration//GEN-END:variables
    

    public static void main(String args[]) {
	JWindow j = new JWindow();
        //JFrame j = new JFrame();
//        j.addMouseMotionListener(new MouseMotionAdapter() {
//           public void mouseMoved(java.awt.event.MouseEvent evt) {
//                System.out.println(evt);
//            }
//        });
        System.out.println(j.getLayout());
        j.add(new TestPanel());
        j.pack();
        j.setVisible(true);
    }
}
